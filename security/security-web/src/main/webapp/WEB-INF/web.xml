<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
    <!--
    初始化过程：
        (1)在启动Web项目时，容器(比如Tomcat)会读web.xml配置文件中的两个节点<listener>和<contex-param>。
        (2)接着容器会创建一个ServletContext(上下文),应用范围内即整个WEB项目都能使用这个上下文。
        (3)接着容器会将读取到<context-param>转化为键值对,并交给ServletContext。
        (4)容器创建<listener>中的类实例,即创建监听（备注：listener定义的类必须需要继承ServletContextListener）。
        (5)在监听的类中会有一个contextInitialized(ServletContextEvent event)初始化方法，
        在这个方法中可以通过event.getServletContext().getInitParameter("contextConfigLocation")来得到context-param设定的值。
        在这个类中还必须有一个contextDestroyed(ServletContextEvent event)销毁方法用于关闭应用前释放资源。
        (6)得到这个context-param的值之后,你就可以做一些操作了。注意,这个时候你的WEB项目还没有完全启动完成。
        这个动作会比所有的Servlet都要早。
     -->
    <!-- 由上面的初始化过程可知容器对于web.xml的加载过程是context-param > listener > filter > servlet -->

    <!--该元素用来声明应用范围(整个WEB项目)内的上下文初始化参数。 -->
    <context-param>
        <!-- 必须是唯一名称 -->
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath*:META-INF/spring/applicationContext.xml
            classpath*:META-INF/spring/spring-security.xml
        </param-value>
    </context-param>
    <!-- 设置ServletContextListener监听器 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 过滤器：将一个名字与一个实现javax.servlet.Filter接口的类相关联 -->
    <!-- spring中的字符集过滤器，会拦截所有的URL -->
    <!-- 相当于：request.setCharacterEncoding("UTF-8"); -->
    <!-- forceEncoding=true相当于：response.setCharacterEncoding("UTF-8"); -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- Spring Security过滤器链配置 -->
    <!-- 这为Spring Security框架提供了一个钩子函数。DelegatingFilterProxy是Spring框架的一个类
        其会将过滤操作委派给一个在ApplicationContext中以spring bean方式定义的Filter。-->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 声明一个Servlet -->
    <!-- SpringMVC的配置,最优先加载spring-mvc.xml -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:META-INF/spring/spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- JSP页面设置 -->
    <jsp-config>
        <jsp-property-group>
            <url-pattern>*.jsp</url-pattern>
            <el-ignored>false</el-ignored>
            <page-encoding>UTF-8</page-encoding>
            <scripting-invalid>false</scripting-invalid>
            <include-prelude>/WEB-INF/views/common/include.jsp</include-prelude>
        </jsp-property-group>
    </jsp-config>

    <!-- 错误页面设置 -->
    <error-page>
        <error-code>500</error-code>
        <location>/WEB-INF/views/common/error/systemError.jsp</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/views/common/error/resourceNotFoundError.jsp</location>
    </error-page>
    <error-page>
        <exception-type>java.lang.Exception</exception-type>
        <location>/WEB-INF/views/common/error/unhandledSystemError.html</location>
    </error-page>

    <!-- 会话超时配置(min) -->
    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>

    <!-- 欢迎页面的URL -->
    <welcome-file-list>
        <welcome-file>/</welcome-file>
    </welcome-file-list>
</web-app>